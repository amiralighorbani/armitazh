<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video</title>
  <link rel="icon" type="image/x-icon" href="/pic/setting.svg">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css"
    integrity="sha384-PJsj/BTMqILvmcej7ulplguok8ag4xFTPryRq8xevL7eBYSmpXKcbNVuy+P0RMgq" crossorigin="anonymous">
  <link rel="stylesheet" href="/css/src/jalali.css">
  <link rel="stylesheet" href="/css/setting style.css">
  <link rel="stylesheet" href="/css/helper.css">
</head>
<style>
  @font-face {
    font-family: "yekan";
    src: url("../font/Yekan.ttf");
  }

  * {
    font-family: "yekan";
    letter-spacing: 0;
  }

  #helper {
    background: linear-gradient(to bottom,
        rgba(0, 0, 0, 0.3) 0%,
        rgba(0, 0, 0, 0.7) 75%,
        #000 100%),
      url("./../pic/armit.jpg");
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: scroll;
    background-size: cover;
  }

  .front {
    will-change: transform;
    transition: transform 250ms;
  }

  .pushable:hover .front {
    transform: translateY(-6px);
  }

  .pushable:active .front {
    transform: translateY(-2px);
  }

  .helpee {
    border: none;
    background-color: black;
    color: aliceblue;
    border-radius: 10px;
    padding: 2px 14px;
  }


  .input-file {
    position: relative;
    display: inline-block;
  }

  .input-file-btn {
    position: relative;
    display: inline-block;
    cursor: pointer;
    outline: none;
    text-decoration: none;
    font-size: 14px;
    vertical-align: middle;
    color: rgb(255 255 255);
    text-align: center;
    border-radius: 4px;
    background-color: #419152;
    line-height: 22px;
    height: 40px;
    padding: 10px 20px;
    box-sizing: border-box;
    border: none;
    margin: 0;
    transition: background-color 0.2s;
  }

  .input-file-text {
    padding: 0 10px;
    line-height: 40px;
    display: inline-block;
  }

  .input-file input[type=file] {
    position: absolute;
    z-index: -1;
    opacity: 0;
    display: block;
    width: 0;
    height: 0;
  }

  /* Focus */
  .input-file input[type=file]:focus+.input-file-btn {
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);
  }

  /* Hover/active */
  .input-file:hover .input-file-btn {
    background-color: #59be6e;
  }

  .input-file:active .input-file-btn {
    background-color: #2E703A;
  }

  /* Disabled */
  .input-file input[type=file]:disabled+.input-file-btn {
    background-color: #eee;
  }
</style>

<body dir="rtl">
  <div class="container-fluid" id="helper">


    <nav class="navbar navbar-expand-lg" style="background-color: #0B1A2A;">
      <div class="container px-4 px-lg-5">
        <a class="navbar-brand" href="#" style="color: aliceblue;">
          <button id="save" class="pushable">
            <span class="front">
              ذخیره تغییرات
            </span>
          </button>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span
            class="navbar-toggler-icon"></span></button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent" style="position: absolute; left: 100px;">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">
            <li class="nav-item"><a class="nav-link active" aria-current="page" href="/tv"
                style="color: aliceblue;">صفحه
                اصلی</a></li>
            <li class="nav-item"><a class="nav-link" href="/settings" style="color: aliceblue;">تنظیمات</a></li>
            <li class="nav-item"><a class="nav-link" href="/tv/b8:27:eb:cd:6d:94" id="first" style="color: aliceblue;">تلویزیون</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="/category" id="first" style="color: aliceblue;">دسته بندی</a>
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                href="/video"
                id="first"
                style="color: aliceblue"
                >ویدیو ها</a
              >
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                href="/view"
                id="first"
                style="color: aliceblue"
                >آمار</a
              >
            </li>
            <li class="nav-item"><a class="nav-link ml-auto" href="/api/logout" style="color: aliceblue;">خروج</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>


    <div class="row justify-content-center mt-5">
      <div class="col-8 accordion" id="accordionContainer">
        <div class="accordion-item">
          <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
              data-bs-target="#collapseVideoList">
              زمان‌بندی
            </button>
          </h2>
          <div id="collapseVideoList" class="accordion-collapse collapse m-0" data-bs-parent="#accordionContainer">
            <div class="accordion-body">
              <div id="days-container">
              </div>
            </div>
          </div>
        </div>
        <div class="accordion-item">
          <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
              data-bs-target="#collapseAddVideo">
              تعطیلات
            </button>
          </h2>
          <div id="collapseAddVideo" class="accordion-collapse collapse" data-bs-parent="#accordionContainer">
            <div class="accordion-body">
              <div class="container pb-5">
                <div class="row days-container justify-content-center" dir="rtl">
                </div>
              </div>
            </div>
          </div>
        </div>
      
        

      </div>
    </div>


    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>
    <hr>

    <!-- error section -->
    <footer class="py-5 bg-dark" style="width: 100.5%;">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; Your
          Website 2023</p>
      </div>
    </footer>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
    crossorigin="anonymous"></script>
  <script type="text/javascript" src="/js/src/jalaliData.js"></script>
  <script src='/js/src/jalali.js'></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    var socket = io();
  </script>
  <script>
    jalaliDatepicker.startWatch();
  </script>
  <script>// const { version } = require("../../app/http/contorollers/apiController");
// const { version } = require("../../app/http/contorollers/apiController");
// const { version } = require("process");
// const { check } = require("express-validator");
// const { text } = require("body-parser");
// const { Socket } = require("socket.io");






const persianDay = ['یکشنبه', 'یکشنبه', 'دوشنبه', 'دوشنبه', 'سه شنبه', 'سه شنبه', 'چهارشنبه', 'چهارشنبه', 'پنجشنبه', 'پنجشنبه', 'جمعه', 'جمعه', 'شنبه', 'شنبه'];
const ver = document.querySelector('#ver');
const daysContainer = document.querySelector('#days-container');
const saveBtn = document.querySelector('#save');
const timeUpdate = document.querySelector('#time-update');
const dateUpdate = document.querySelector('#date-update');
const createHolydayList = document.querySelector('#create-holyday-list');
const resetDate = document.querySelector('#resetDate');
const videoListContainer = document.querySelector('#videoList');
const toastBody = document.querySelector('.toast-body');
const categoryBar = document.querySelector("#categoryBar");
const showModal = document.querySelector("#showModal");




function changeDigit(number) {
    const strNum = typeof number === 'string' ? number : String(number);
    return strNum.length > 1 ? strNum : '0' + strNum;
}



function getAPI(path) {
    return (
        fetch(path)
            .then(res => res.json())
            .then(data => {
                return data;
            })
    );
}

async function execute() {
    // version = (await getAPI('http://localhost:3001/api'));
    async function hello() {
        return await socket.emit("getVersion")
    }
    hello();
    socket.on('jsonFilee', async data => {
        let version = await data
       // ver.textContent = version["Ver"];
        version["VideoList"].forEach(element => {
            const listElement = document.createElement('li');
            const spanName = document.createElement('span');
            listElement.classList = "d-flex justify-content-between my-1 px-1 text-success video-list border border-success rounded-1";
            spanName.textContent = element;
            spanName.style.maxWidth = '70%';
            listElement.appendChild(spanName);
            // videoListContainer.appendChild(listElement);
        });
        let days = version["onOffTimeSchedule"];
        let oneOrTwo = 1;
        for (let i = 0; i < days.length; i++) {
            const input_group = document.createElement('div');
            const day_name = document.createElement('span');
            const start = document.createElement('span');
            const end = document.createElement('span');
            const start_time = document.createElement('input');
            const end_time = document.createElement('input');
            const morningOrEvening = oneOrTwo == 1 ? 'صبح' : 'ظهر';
            input_group.classList = 'input-group my-3';
            day_name.textContent = `${persianDay[i]} ${morningOrEvening}`;
            day_name.classList = `input-group-text ${days[i]["day"]}onTime${oneOrTwo}`;
            start.textContent = 'زمان شروع';
            start.classList = `input-group-text`;
            end.textContent = 'زمان پایان';
            end.classList = `input-group-text`;
            start_time.type = 'time';
            start_time.value = `${changeDigit(days[i][`onTime${oneOrTwo}`]["hour"])}:${changeDigit(days[i][`onTime${oneOrTwo}`]["minute"])}`;
            start_time.classList = `form-control start-time`;
            if (oneOrTwo === 2) {
                start_time.classList.add('onTime2');
            }
            end_time.type = 'time';
            end_time.value = `${changeDigit(days[i][`offTime${oneOrTwo}`]["hour"])}:${changeDigit(days[i][`offTime${oneOrTwo}`]["minute"])}`;
            end_time.classList = `form-control end-time`;
            if (oneOrTwo === 1) {
                end_time.classList.add('offTime1');
            }
            input_group.appendChild(day_name);
            input_group.appendChild(start);
            input_group.appendChild(start_time);
            input_group.appendChild(end);
            input_group.appendChild(end_time);
            daysContainer.appendChild(input_group)
            oneOrTwo = oneOrTwo == 1 ? 2 : 1;
        }

        let yearDaysArray = [];
        moment.locale('fa');
        for (let i = 80; i < 366; i++) {
            yearDaysArray.push(moment.from(i, 'en', 'DDD').format('MM/DD'))
        }
        for (let i = 1; i < 80; i++) {
            yearDaysArray.push(moment.from(i, 'en', 'DDD').format('MM/DD'))
        };
        const monthDictionary = {
            "01": "فروردین",
            "02": "اردیبهشت",
            "03": "خرداد",
            "04": "تیر",
            "05": "مرداد",
            "06": "شهریور",
            "07": "مهر",
            "08": "آبان",
            "09": "آذر",
            "10": "دی",
            "11": "بهمن",
            "12": "اسفند"
        }

        createDaysOfYear(yearDaysArray, monthDictionary);

        function createDaysOfYear(daysArray, dictionary) {
            const daysContainer = document.querySelector('.days-container');
            const holyday = version["Holyday"];
            let i = 0;
            daysArray.forEach(element => {
                const dayContainer = document.createElement('div');
                const formCheck = document.createElement('div');
                const label = document.createElement('label');
                const monthStr = document.createElement('span');
                const monthNum = document.createElement('span');
                const dayStr = document.createElement('span');
                const dayNum = document.createElement('span');
                const input = document.createElement('input');
                dayContainer.classList = 'col-md-5 col-xl-3 p-2 day-container rounded-3 m-2';
                formCheck.classList = 'form-check form-switch p-0';
                label.classList = 'form-check-label float-start';
                label.setAttribute('for', element);
                monthStr.textContent = 'ماه: ';
                monthNum.textContent = dictionary[element.slice(0, 2)];
                dayStr.textContent = ' روز: ';
                dayNum.textContent = element.slice(3, 5);
                input.classList = 'form-check-input float-end holyday-check';
                input.setAttribute('id', element);
                if (holyday[i] == 0) {
                    input.checked = true;
                }
                input.type = 'checkbox';
                input.role = 'switch';
                label.appendChild(monthStr);
                label.appendChild(monthNum);
                label.appendChild(dayStr);
                label.appendChild(dayNum);
                formCheck.appendChild(label);
                formCheck.appendChild(input);
                dayContainer.appendChild(formCheck);
                daysContainer.appendChild(dayContainer);
                i++;
            });
        }

        //timeUpdate.value = `${version["updateDate"]["hour"]}:${version["updateDate"]["minute"]}`;
        //dateUpdate.value = version["updateDate"]["setDate"] ? `${version["updateDate"]["year"]}/${version["updateDate"]["month"]}/${version["updateDate"]["day"]}` : '';

        const inputStartTime = document.querySelectorAll('.start-time');
        const inputEndTime = document.querySelectorAll('.end-time');
        let timingError = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], timingErrorOff1On2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

        for (let index = 0; index < inputStartTime.length; index++) {
            const element = inputStartTime[index];
            element.addEventListener('change', () => {
                if (!(element.value < element.parentElement.children[4].value)) {
                    element.classList.add('bg-danger');
                    timingError[index] = 0;
                } else if (timingError[index] === 0) {
                    element.classList.remove('bg-danger');
                    timingError[index] = 1;
                }
                if (Array.from(element.classList).indexOf('onTime2') === -1) return;
                const indexFocusItem = Array.from(element.parentElement.parentElement.children).indexOf(element.parentElement);
                const offTime1 = daysContainer.children[indexFocusItem - 1].children[4];
                if (!(element.value > offTime1.value)) {
                    element.classList.add('bg-danger');
                    timingErrorOff1On2[index] = 0;
                } else if (timingErrorOff1On2[index] === 0) {
                    timingErrorOff1On2[index] = 1;
                    if (timingError[index] === 1) {
                        element.classList.remove('bg-danger');
                    }
                }
            })
        }

        for (let index = 0; index < inputEndTime.length; index++) {
            const element = inputEndTime[index];
            element.addEventListener('change', () => {
                if (!(element.value > element.parentElement.children[2].value)) {
                    element.classList.add('bg-danger');
                    timingError[index] = 0;
                } else if (timingError[index] === 0) {
                    element.classList.remove('bg-danger');
                    timingError[index] = 1;
                }
                if (Array.from(element.classList).indexOf('offTime1') === -1) return;
                const indexFocusItem = Array.from(element.parentElement.parentElement.children).indexOf(element.parentElement);
                const onTime2 = daysContainer.children[indexFocusItem + 1].children[2];
                if (!(element.value < onTime2.value)) {
                    element.classList.add('bg-danger');
                    timingErrorOff1On2[index] = 0;
                } else if (timingErrorOff1On2[index] === 0) {
                    timingErrorOff1On2[index] = 1;
                    if (timingError[index] === 1) {
                        element.classList.remove('bg-danger');
                    }
                }
            })
        }
        saveBtn.addEventListener('click', () => {
            let oneOrTwo = 1;
            if (timingError.indexOf(0) !== -1 || timingErrorOff1On2.indexOf(0) !== -1) {
                const toastLiveExample = document.getElementById('liveToast');
                const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
                toastBody.textContent = 'خطا در زمان‌بندی!';
                toastBootstrap.show();
                return;
            }
            days.forEach(element => {
                const day = document.querySelector(`.${element["day"]}onTime${oneOrTwo}`);
                element[`onTime${oneOrTwo}`] = {
                    hour: day.parentElement.children[2].value.slice(0, 2),
                    minute: day.parentElement.children[2].value.slice(3, 5)
                };
                element[`offTime${oneOrTwo}`] = {
                    hour: day.parentElement.children[4].value.slice(0, 2),
                    minute: day.parentElement.children[4].value.slice(3, 5)
                };
                oneOrTwo = oneOrTwo == 1 ? 2 : 1;
            });
            version["onOffTimeSchedule"] = days;

            let holydayStr = '';
            let holydayChecks = document.querySelectorAll('.holyday-check');
            holydayChecks.forEach(element => {
                const isHolyday = element.checked ? 0 : 1;
                holydayStr += isHolyday;
            })
            version["Holyday"] = holydayStr;

           
            console.log("hlellelldsjfl")
            socket.emit("changeVersion", version);
            location.reload();
            //version["updateDate"] = updateDate;
            //socket.emit("changeGroup", group);
        })

    })
}
execute();

//resetDate.addEventListener('click', () => {
//    timeUpdate.value = '';
//    dateUpdate.value = '';
//})
</script>
  <script src="/js/setting.js"></script>
  <script>
    const videoListe = document.querySelector("#videoListe")

    socket.emit("getGroup")
    socket.on("jsonFile", data => {
      let videos = data["videos"]
      //videos.forEach(video => {
      //  videoListe.innerHTML +=
      //    `
      //            <li class="row" id="Videooos" data-name="${video}">
      //              <div class="col"><h5>${video}</h5></div>
      //              <div class="col">
      //                <button class="helpee" id="playButten" data-name="${video}" style="background-color: darkgray;">پخش</button>
      //              </div>
      //              <div class="col">
      //                <button class="helpee" id="deleteButten" data-name="${video}">حذف</button>
      //              </div>
      //              <hr  class="m-3">
      //            </li>
      //  `
      //})

      const videoPlayer = document.querySelector(".videoPlayer")
      const playButten = document.querySelectorAll("#playButten")
      const deleteButten = document.querySelectorAll("#deleteButten")


      playButten.forEach(butten => {
        butten.addEventListener("click", e => {
          const videoName = e.target.getAttribute("data-name")
          videoPlayer.src = `http://localhost:3000/api/video/${videoName}`
          videoPlayer.load()
          videoPlayer.play()
        })
      })

      deleteButten.forEach(butten => {
        butten.addEventListener("click", e => {
          const videoName = e.target.getAttribute("data-name")
          e.target.parentNode.parentNode.remove()
        })
      })





      document.getElementById("save").addEventListener("click", async e => {

        socket.emit("getVideo", "TV-F")
        let allCat = []
        const li = document.querySelectorAll("#liste")
        li.forEach(l => {
          allCat.push(l.getAttribute("data-number"))
        })

        let groups = []
        data["groups"].forEach(cat => {
          groups.push(cat.name)
        })

        if (allCat.length > groups.length) {
          allCat = allCat.filter(cat => !groups.includes(cat))
        }
        allCat = allCat.filter(cat => !groups.includes(cat))
        allCat.forEach(cat => {
          data["groups"].push({
            name: cat,
            videos: []
          })
        })




        const Videooos = document.querySelectorAll("#Videooos")
        let Videos = []
        Videooos.forEach(e => {
          Videos.push(e.getAttribute("data-name"))
        })

        let deletedVideo = data["videos"].filter(function (element) {
          return Videos.indexOf(element) === -1;
        });


        const res = await fetch(`http://localhost:3000/api/video/delete/${deletedVideo}`, { method: "GET" })
        data["groups"].forEach(cat => {
          for (let i = 0; i < cat.videos.length; i++) {
            if (cat.videos[i] == deletedVideo) {
              cat.videos.splice(i, 1)
            }
          }
        })
        data["player"].forEach(player => {
          for (let i = 0; i < player.playlist.length; i++) {
            if (player.playlist[i] == deletedVideo) {
              player.playlist.splice(i, 1)
            }
          }
        })


        deletedVideo.forEach(async videoName => {
          const res = await fetch(`http://localhost:3000/api/video/delete/${deletedVideo}`, { method: "GET" })
          data["groups"].forEach(cat => {
            for (let i = 0; i < cat.videos.length; i++) {
              if (cat.videos[i] == videoName) {
                cat.videos.splice(i, 1)
              }
            }
          })
          data["player"].forEach(player => {
            for (let i = 0; i < player.playlist.length; i++) {
              if (player.playlist[i] == videoName) {
                player.playlist.splice(i, 1)
              }
            }
          })
        })



        data["videos"] = Videos
        socket.emit("changeGroup", data)
        //location.reload()
      })
    })

  </script>
  <script>
    const inputVideoAdd = document.querySelector('#videoAdd')
    const videoAddSubmit = document.querySelector('#videoAddSubmit')
    const textSelected = document.querySelector('#textSelected')

    //console.log(inputVideoAdd.value)
    //if (!inputVideoAdd.value) {
    //  videoAddSubmit.style.display = 'none';
    //}
    //inputVideoAdd.addEventListener("change", e => {
    //  const selectedFile = event.target.files[0];
    //  if (selectedFile) {
    //    textSelected.textContent = `ویدیوی ${selectedFile.name} با حجم ${selectedFile.size} انتخاب شده است برای افزودن روی دکمه ی افزودن بزنید`
    //    videoAddSubmit.style.display = 'block';
    //  }
    //})
  </script>
</body>

</html>